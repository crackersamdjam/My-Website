{
    // "shell_cmd": "g++ -std=c++14 \"${file}\" -o \"${file_path}/${file_base_name}\" && \"${file_path}/${file_base_name}\"",
    // "file_regex": "^(..[^:]*):([0-9]+):?([0-9]+)?:? (.*)$",
    // "working_dir": "${file_path}",
    // "selector": "source.c, source.c++",
    "variants":
    [   
    {
        "name": "Fast",
        "shell_cmd": "g++ -std=c++14 -Wshadow -Wall -O2 -Wno-unused-result \"${file}\" -o \"${file_path}/${file_base_name}\" && timeout 3s \"${file_path}/${file_base_name}\" < in > out 2> err",
        "working_dir": "${file_path}",
        "selector": "source.c, source.c++"
    },
    {
        "name": "Fast-noTime",
        "shell_cmd": "g++ -std=c++14 -Wshadow -Wall -O2 -Wno-unused-result \"${file}\" -o \"${file_path}/${file_base_name}\" && time \"${file_path}/${file_base_name}\" < in > out 2> err",
        "working_dir": "${file_path}",
        "selector": "source.c, source.c++"
    },

    {
        "name": "Sanitize",
        "shell_cmd": "g++ -std=c++14 -Wshadow -Wall -g -fsanitize=address -fsanitize=undefined -D_GLIBCXX_DEBUG \"${file}\" -o \"${file_path}/${file_base_name}\" && timeout 3s \"${file_path}/${file_base_name}\" < in > out 2> err",
        "working_dir": "${file_path}",
        "selector": "source.c, source.c++"
    },
    {
        "name": "Sanitize-noTime",
        "shell_cmd": "g++ -std=c++14 -Wshadow -Wall -g -fsanitize=address -fsanitize=undefined -D_GLIBCXX_DEBUG \"${file}\" -o \"${file_path}/${file_base_name}\" && time \"${file_path}/${file_base_name}\" < in > out 2> err",
        "working_dir": "${file_path}",
        "selector": "source.c, source.c++"
    }

    ]
}
// -w to disable all compiler warnings
// use -H flag to list headers used
// stdin from in, stdout to out, sterr to err
// Fast takes advantage of precompiled header
// Sanitize does not